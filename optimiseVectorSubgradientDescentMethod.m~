function [xk,iteration]= optimiseVectorSubgradientDescentMethod(set_of_regions_functions,info_on_regions,hyperplanes,variables,x0,learning_rate,stopping_criterion)
  xk = x0;
  iteration = 0;
  while (1)              
      logical_column_of_active_regions = calculateActiveRegions(info_on_regions,hyperplanes,variables,xk);
      [~,~,arrayofvectorisedJacobians] = calculateGeneralisedJacobian(logical_column_of_active_regions,set_of_regions_functions, xk,variables);             
      
      jacobian_step = calculateJacobianStep(arrayofvectorisedJacobians,size(xk,1));
      if (norm(jacobian_step)<stopping_criterion)
          break 
      end
      []
      [xk,learning_rate] = updateX(xk,logical_column_of_activ, jacobian_step,learning_rate);
      iteration = iteration + 1;              
  end